@page "/recipes"

<style>
    body {
        font-family: 'Segoe UI', sans-serif;
        background: #f3f4f6;
        margin: 0;
    }

    h2 {
        text-align: center;
        margin: 2rem 0 1rem;
        font-size: 2rem;
        color: #2c3e50;
    }

    .recipes-container {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        justify-content: center;
        padding-bottom: 3rem;
    }

    .recipe-card {
        background: white;
        border-radius: 16px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
        width: 320px;
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        transition: all 0.25s ease;
    }

        .recipe-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
        }

        .recipe-card img {
            width: 100%;
            height: 180px;
            object-fit: cover;
            border-radius: 12px;
            margin-bottom: 1rem;
        }

    .add-btn {
        background-color: #2563eb;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 8px;
        margin: 1rem auto 2rem;
        display: block;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .add-btn:hover {
            background-color: #1d4ed8;
        }

    .modal {
        background-color: rgba(0, 0, 0, 0.4);
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(8px);
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        width: 420px;
        animation: fadeIn 0.2s ease-in-out;
    }

        .modal-content h3 {
            margin-bottom: 1rem;
            color: #333;
        }

        .modal-content input {
            width: 100%;
            padding: 0.75rem;
            margin-bottom: 1rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.2s ease;
        }

            .modal-content input:focus {
                border-color: #0078D4;
                outline: none;
            }

        .modal-content button {
            background-color: #10b981;
            color: white;
            border: none;
            padding: 0.6rem 1.2rem;
            margin-right: 0.5rem;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s ease;
        }

            .modal-content button:hover {
                background-color: #059669;
            }

        .modal-content ul {
            padding-left: 1.2rem;
            margin-bottom: 1rem;
        }

            .modal-content ul li {
                color: #374151;
            }

</style>


<h2 style="text-align:center; margin-bottom: 2rem;">🍽️ Modern Recipes</h2>

<button class="add-btn" @onclick="() => showModal = true">➕ Add Recipe</button>

@if (showModal)
{
    <div class="modal" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <h3>Add New Recipe</h3>
            <input type="text" placeholder="Recipe Name" @bind="newRecipe.Name" />
            <input type="text" placeholder="Image Path" @bind="newRecipe.ImageUrl" />
            <input type="number" placeholder="Prep Time (min)" @bind="newRecipe.PrepTimeMinutes" />

            <p><strong>Current Prep Time:</strong> @newRecipe.PrepTimeMinutes min</p>

            <h4>Ingredient</h4>
            <input type="text" placeholder="Name" @bind="newIngredient.Name" />
            <input type="number" placeholder="Amount (US)" @bind="newIngredient.AmountUS" />
            <input type="text" placeholder="Unit (US)" @bind="newIngredient.UnitUS" />
            <input type="text" placeholder="Unit (Metric)" @bind="newIngredient.UnitMetric" />
            <button @onclick="AddIngredient">Add Ingredient</button>

            <ul>
                @foreach (var ingredient in newRecipe.Ingredients)
                {
                    <li>@ingredient.Name - @ingredient.AmountUS @ingredient.UnitUS</li>
                }
            </ul>

            <button @onclick="AddRecipe">Save Recipe</button>
            <button @onclick="CloseModal">Cancel</button>
        </div>
    </div>
}

<div class="recipes-container">
    @foreach (var recipe in Recipes)
    {
        <div class="recipe-card">
            <img src="@recipe.ImageUrl" alt="@recipe.Name" />
            <h3>@recipe.Name</h3>
            <p><strong>Prep Time:</strong> @recipe.PrepTimeMinutes min</p>
            <ul style="width: 100%; padding-left: 1rem;">
                @foreach (var ingredient in recipe.Ingredients)
                {
                    <li>
                        @ingredient.Name:
                        @ingredient.AmountUS @ingredient.UnitUS
                        (<span style="color: #0078d4;">@ConvertToMetric(ingredient.AmountUS, ingredient.UnitUS) @ingredient.UnitMetric</span>)
                    </li>
                }
            </ul>
        </div>
    }
</div>

@code {
    @code {
        public class Recipe
        {
            public string Name { get; set; } = "";
            public int PrepTimeMinutes { get; set; }
            public List<Ingredient> Ingredients { get; set; } = new();
            public string ImageUrl { get; set; } = "";
        }

        public class Ingredient
        {
            public string Name { get; set; } = "";
            public double AmountUS { get; set; }
            public string UnitUS { get; set; } = "";
            public string UnitMetric { get; set; } = "";
            public double MetricAmount { get; set; } // New field for automatic conversion
        }

        List<Recipe> Recipes = new()
    {
        new Recipe
        {
            Name = "Pancakes",
            PrepTimeMinutes = 10,
            ImageUrl = "https://www.allrecipes.com/thmb/WqWggh6NwG-r8PoeA3OfW908FUY=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/21014-Good-old-Fashioned-Pancakes-mfs_001-1fa26bcdedc345f182537d95b6cf92d8.jpg",
            Ingredients = new List<Ingredient>
            {
                new Ingredient { Name = "Flour", AmountUS = 1, UnitUS = "cup", UnitMetric = "g", MetricAmount = 236.6 },
                new Ingredient { Name = "Milk", AmountUS = 1, UnitUS = "cup", UnitMetric = "ml", MetricAmount = 236.6 },
                new Ingredient { Name = "Egg", AmountUS = 1, UnitUS = "piece", UnitMetric = "piece", MetricAmount = 1 }
            }
        },
        new Recipe
        {
            Name = "Omelette",
            PrepTimeMinutes = 5,
            ImageUrl = "https://th.bing.com/th/id/R.9eafdb4139f771d6f30985a99cad2114?rik=fIGJqUfs3i9PrA&riu=http%3a%2f%2fwww.elizabethpeddey.com.au%2fwp-content%2fuploads%2f2020%2f04%2fOMELETTE-scaled.jpg&ehk=uW9E4LaCXiDOMfJZ1x%2focqEG7Yjl46YbspiXgBQog%2fI%3d&risl=&pid=ImgRaw&r=0",
            Ingredients = new List<Ingredient>
            {
                new Ingredient { Name = "Egg", AmountUS = 2, UnitUS = "piece", UnitMetric = "piece", MetricAmount = 2 },
                new Ingredient { Name = "Milk", AmountUS = 0.25, UnitUS = "cup", UnitMetric = "ml", MetricAmount = 59.1 }
            }
        }
    };

        bool showModal = false;

        Recipe newRecipe = new Recipe();
        Ingredient newIngredient = new Ingredient();

        void AddIngredient()
        {
            if (!string.IsNullOrWhiteSpace(newIngredient.Name))
            {
                // Calculate metric value automatically
                newIngredient.MetricAmount = ConvertToMetric(newIngredient.AmountUS, newIngredient.UnitUS);

                newRecipe.Ingredients.Add(new Ingredient
                {
                    Name = newIngredient.Name,
                    AmountUS = newIngredient.AmountUS,
                    UnitUS = newIngredient.UnitUS,
                    UnitMetric = newIngredient.UnitMetric,
                    MetricAmount = newIngredient.MetricAmount
                });

                newIngredient = new Ingredient(); // reset
            }
        }

        void AddRecipe()
        {
            if (!string.IsNullOrWhiteSpace(newRecipe.Name))
            {
                Recipes.Add(new Recipe
                {
                    Name = newRecipe.Name,
                    ImageUrl = newRecipe.ImageUrl,
                    PrepTimeMinutes = newRecipe.PrepTimeMinutes,
                    Ingredients = newRecipe.Ingredients.ToList()
                });

                newRecipe = new Recipe();
                showModal = false;
            }
        }

        void CloseModal()
        {
            showModal = false;
            newRecipe = new Recipe();
            newIngredient = new Ingredient();
        }

        double ConvertToMetric(double amount, string unitUS)
        {
            return unitUS switch
            {
                "cup" => Math.Round(amount * 236.588, 1),
                "tbsp" => Math.Round(amount * 14.787, 1),
                "tsp" => Math.Round(amount * 4.929, 1),
                "oz" => Math.Round(amount * 28.35, 1),
                _ => amount // if "piece" or unknown
            };
        }
    }

}
